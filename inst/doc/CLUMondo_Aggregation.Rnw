\documentclass[
  parskip=half,
  headings=small,
  toc=bib
]{scrartcl}
\usepackage[utf8x]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[section]{placeins}
\usepackage[english]{babel}
\usepackage{csquotes}
%\usepackage{booktabs}
%\usepackage{amsmath}
\usepackage{natbib}
\bibliographystyle{apalike}
\usepackage{microtype}
\usepackage{hyperref}
\addtokomafont{captionlabel}{\footnotesize\sffamily\bfseries} 
\addtokomafont{caption}{\footnotesize\sffamily}               
\title{Aggregating and Translating CLUMondo Grids to LPJmL}
\author{René Sachse \texttt{rene.sachse@uni-potsdam.de}}
%\VignetteIndexEntry{Aggregating and Translating CLUMondo grids}
%\VignetteDepends{sp, maptools, RColorBrewer} 
%\VignetteKeyword{CLUMondo} 
%\VignetteKeyword{LPJmL} 
%\VignetteKeyword{grid} 
%\VignetteKeyword{projection} 
%\VignetteKeyword{land use} 
\begin{document}
%\SweaveOpts{concordance=TRUE}
\SweaveOpts{concordance=TRUE, pdf=FALSE, png=TRUE, eps=FALSE, width=7, height=5, res=100}

\setkeys{Gin}{width=0.7\textwidth}
\maketitle
\tableofcontents
\section{Read and transform CLUMondo grids}
First the package \texttt{luess} needs to be loaded. It relies a lot on the 
functionality of the sp package. The luess package contains lots of sample data. To save 
time we 
use this packaged data instead of generating it from scratch. 
Therefore, some commands are out-commented.
<<load_data>>=
library(luess)
#CLUlonglat <- transform_asciigrid("land_systems.asc")
@
\texttt{transform\_asciigrid()} reads CLUMondo output grids \citep{Asselen2012, 
Verburg2013}
and transforms them from Eckert~IV projection 
(areas equivalent) to longlat format (geographic coordinates, 
equirectangular projection, plate carrée). 
The function also could deal with any other projections when specified as argument (for 
using function 
arguments, see the function documentation by typing \texttt{?transform\_asciigrid}).

You can globally inspect the reprojected longlat CLUMondo grid by:
<<plot_clupix_glob, eval=FALSE>>=
spplot(CLUlonglat, pch=".")
@
or zoom into central Africa:
<<plot_clupix_africa, eval=FALSE>>=
spplot(CLUlonglat, pch=".",xlim=c(-10,30), ylim=c(-20,20))
@
Because of the transformation, the grid is not regular anymore. The function therefore, 
returns a 
data.frame with spatial points (SpatialPointsDataFrame).

The reprojected CLUMondo grid cells perfectly overlap LPJmL grid cells without any 
systematic 
offset (Fig.~\ref{fig:clulpjnooff}).

\begin{figure}[tb]
\centering
<<clulpj_nooff, fig=TRUE, echo=FALSE>>=
plot(lpj_ingrid, pch=15, cex=0.5)
points(coordinates(CLUlonglat), pch=15, cex=0.1, col="green")
@
\caption{Overlay of LPJmL grid cells (black) and re-projected CLUMondo grid cell centers 
(green). 
There is no systematic offset indicating valid re-projection. LPJmL grid cells were 
plotted with 
bigger points, so that they can be seen under the CLUMondo points. LPJmL grid cells 
\enquote{pop out} 
equally in every direction.\label{fig:clulpjnooff}}
\end{figure}

\section{Generate new model grids}
LPJmL works with a much lower resolution than CLUMondo. We can generate such an 0.5° 
grid by using:
<<gen_grid>>=
cluagg_grid <- generate_grid()
@

\section{Match LPJmL grid cells with new grid cells}
The data set \texttt{lpj\_ingrid} contains the coordinates of the cell centers of the 
67420 original grid 
cells
used within LPJmL. To figure out, which of the cells of our generated regular grid 
represent these 
original cells we can use the 
function \texttt{matchInputGrid}:
<<matchgrid, eval=FALSE>>=
lpj_long_clupos <- matchInputGrid(
  coordinates(cluagg_grid), 
  lpj_ingrid
)
@
\texttt{lpj\_long\_clupos} than contains the integer numbers (positions) of the original LPJmL cells 
within our set up low resolution grid.

\section{Resample transformed CLUMondo data for LPJ cells}
Resampling is performed using function \texttt{over()} internally from package sp. It is 
determined in 
which grid cells the cell centers of the
CLUMondo cells are located. In case a CLUMondo cell center is 
located within a grid cell, than that 
complete CLUMondo pixel is assigned to that cell assuming that the majority of the 
CLUMondo pixel is belonging to 
that cell anyway. Furthermore, it is counted
how many CLUMondo pixels of each land use system are located within a grid cell. This 
number divided by 
the absolute number of CLUMondo pixels within a grid
cell provides the fraction of grid cell area this land use system is covering.
<<resampling, eval=FALSE>>=
CLUtoLPJ2040long <- resample_grid(CLUlonglat, lpj_ingrid, 
                    cells=lpj_long_clupos, verbose=TRUE)
@

The option \texttt{verbose=TRUE} returns a list with output. The recent versions of the package
return an object of class SpatialPointsDataFrame as output. See section~\ref{txt:resampleOutput}
for details how to handle data of that format.

Because Eckert IV projection has equivalent areas, but not longlat projection, there are 
up to 48 
CLUMondo pixels within one LPJ grid cell near the equator, while the number of CLUMondo 
pixels per grid 
cell is reducing towards the poles or on 
coasts (Fig.~\ref{fig:cluperlpj} and \ref{fig:gridzoom}). 
On coasts LPJmL pixels also cover water surface due to their coarser resolution and 
therefore contain 
less CLUMondo pixels in these areas.  
Stripe patterns evolve when pixels
are systematically assigned to one side, leaving the other side with one pixel less. 
This might look of 
importance when looking at covered pixels per cell, but later these numbers are used to 
calculate covered 
area fractions. After that calculation, errors due to the assignment of pixels to only 
one grid cell at 
grid cell boarders should be reduced strongly. Size of this error compared to different 
resampling 
methods has not been investigated any further.

\begin{figure}[tb]
\centering
<<plot_clupix_in_lpj, fig=TRUE>>=
nrc  <- sapply(CLUtoLPJ2040long$hrcells, length)
coor <- cbind(CLUtoLPJ2040long$xcoord, CLUtoLPJ2040long$ycoord)
mySpectral <- colorRampPalette(c(brewer.pal(11, "Spectral"), "navy"))
img <- gridPlot(
  values=nrc,
  coordinates=coor,
  main="CLUMondo Grid Cells per LPJ cell",
  clab="",
  res=0.5,
  plot=TRUE,
  axes=TRUE,
  col=rev(mySpectral(50)),
  mar=c(5,4,4,4), cex=1.5
)
@
\caption{Number of CLUMondo pixels within a LPJmL grid cell.\label{fig:cluperlpj}}
\end{figure}

\SweaveOpts{concordance=TRUE, pdf=FALSE, png=TRUE, eps=FALSE, width=7, height=7, res=100}
\setkeys{Gin}{width=0.49\textwidth}
\begin{figure}[tb]
\centering
<<zoom_grid, fig=TRUE, echo=FALSE>>=
hh <- sapply(CLUtoLPJ2040long$hrcells, length)
id <- which(hh > 47)
plot(coordinates(cluagg_grid), pch=15, xlim=c(-53.5,-55), ylim=c(-1.5,-0))
points(CLUlonglat, col="green", pch=15)
points(lpj_ingrid[id,], col="red", pch=16)
abline(v=c(-53.5,-54,-54.5, -55))
abline(h=c(0,-0.5,-1,-1.5))
@
\hfill
<<zoom_grid_pole, fig=TRUE, echo=FALSE>>=
id <- which(hh < 5)
plot(coordinates(cluagg_grid), pch=15, xlim=c(4,6), ylim=c(59,63))
abline(h=seq(59,63,0.5))
abline(v=seq(4,6,0.5))
points(CLUlonglat, col="green", pch=15)
points(lpj_ingrid[id,], col="red", pch=16)
@
\caption{Zoom to the LPJ grid with more than 47 CLUMondo pixel density (left) and less 
than 5 pixels 
density (right). 
Green points: CLUMondo cell centers, Black lines: LPJ grid cells, Red points: LPJ cells 
with extreme low
or high number of CLUMondo pixels. \label{fig:gridzoom}}
\end{figure}


\section{Validation of resampling algorithm}
Validation can be performed by visualization of the resulting aggregated maps and comparing to 
the original maps from \citet{Asselen2012} and \citet{Verburg2013}.

\setkeys{Gin}{width=0.7\textheight}
<<val>>=
forest  <- CLUtoLPJ2040long$lufrac[19,] 
periurb <- CLUtoLPJ2040long$lufrac[29,] 
urban   <- CLUtoLPJ2040long$lufrac[30,] 
natgrass<- CLUtoLPJ2040long$lufrac[24,] 
cropint <- CLUtoLPJ2040long$lufrac[9,] 

purb     <- colorRampPalette(brewer.pal(9, "PuRd"))
reds     <- colorRampPalette(c("gray", brewer.pal(9, "Reds")))
oranges  <- colorRampPalette(c("gray", brewer.pal(9, "Oranges")))
@

\SweaveOpts{concordance=TRUE, pdf=FALSE, png=TRUE, eps=FALSE, width=6, height=4, res=100}
<<valforest, fig=TRUE, echo=TRUE>>=
img_forest  <- gridPlot(values=forest,cex=1.5,  
                        main="Fraction of Dense Forest", 
                        mar=c(5,4,4,7))
@

<<valperiurb, fig=TRUE, echo=TRUE>>=
img_periurb <- gridPlot(values=periurb,cex=1.5,   
                        main="Fraction of Peri Urban", 
                        col=purb(1000), mar=c(5,4,4,7))
@

<<valurb, fig=TRUE, echo=TRUE>>=
img_urban   <- gridPlot(values=urban, cex=1.5,  
                        main="Fraction of Urban", 
                        col=reds(1000), mar=c(5,4,4,7))
@

<<valgrass, fig=TRUE, echo=TRUE>>=
img_natgrass<- gridPlot(values=natgrass, cex=1.5,  
                        main="fraction of natural grassland", 
                        mar=c(5,4,4,7))
@

<<valcropint, fig=TRUE, echo=TRUE>>=
img_cropint <- gridPlot(values=cropint, cex=1.5,  
                        main="fraction of intensive cropland", 
                        col=oranges(1000), mar=c(5,4,4,7))
@

\section{Disentangling CLUMondo Mosaics}
CLUMondo provides 30 different classes of landscape mosaics \citep{Verburg2013}. 
Each mosaic consists of one of the five land covers: trees, buildt up area, bare area, cropland or pasture. Furthermore,
the ClUMondo land use systems contain information about the intensity of the management of the cropland and about
the number of livestocks. At the moment intensity and livestock information is not used for the translation.

For LPJmL we sum up trees, built up area and bare area to an area of natural vegetation (LPJmL does not consider 
urban areas at the moment; however since this area
is increasing in the future, this might be an important enhancement). 
The decision what kind of plant functional types (PFTs) are growing on land, whether it is trees, grass or nothing (bare) is decided by LPJmL on its own on areas 
reserved for potential natural vegetation. 
After aggregation for LPJmL we have the three land covers: natveg, cropland and pasture remaining. In principle, natveg and pasture translates directly to LPJmL, 
while cropland needs to be translated to 13 different crop functional types (CFTs) later. However, CLUMondo pasture was 
defined differently from the one used in LPJmL standard input data (see extra vignette about translation problems). 
Maybe we need to add pasture areas from CLUMondo's natural grassland systems without livestock 
or with only very few livestock to natural vegetation. 

To disentangle the underlying land covers per grid cell, the generic function \texttt{aggregateMosaics()} or a LPJmL specific 
function for CLUMondo aggregation \texttt{aggregateMosaicsClumondo()} can be 
used. Since the mosaic composition in CLUMondo is different in each of the 24 world regions, the function 
\texttt{aggregateMosaicsClumondo()} already applies different tables during the aggregation to all world regions.

We assume a small artifical map of 6 arbitrary mosaic types:
<<plotSmallarea, fig=TRUE, echo=TRUE>>=
spplot(smallarea, col.regions=rev(terrain.colors(100)))
@

Now we can aggregate these mosaics to some (arbitrary) underlying land use classes:
<<disentangleMosaic, fig=TRUE, echo=TRUE>>=
mosaicFractions <- data.frame(
  PFT=c(0,.50,1,0,.10,.30),
  c1=c(.80,.30,0,0,.10,.70),
  c2=c(.20,0,0,.80,.10,0),
  g1=c(0,0,0,.10,.10,0),
  g2=c(0,.20,0,.10,.60,0)
)
grid_lr <- generate_grid(cellcentre.offset=c(-179.75, -59.75))
outMosaic <- resample_grid(smallarea, grid_lr)
outDisentangle <- aggregateMosaics(outMosaic, mosaicFractions)
spplot(outDisentangle, col.regions=rev(terrain.colors(100)), colorkey=TRUE)
@

An example for aggregating the CLUMondo Land System map of the year 2000 is as easy as feeding the function \texttt{aggregateMosaicsClumondo()} with 
the output of the resampling-algorithm (\texttt{out}), the mosaic composition tables of all world regions (\texttt{CLUMosaics}) and with the LPJmL grid containing information for every pixel about the worldregion it belongs to (\texttt{lpjGrid}):

<<aggClu, echo=TRUE>>=
out <- resample_grid(CLUlonglat, generate_grid(), cells=lpj_long_clupos)
cluAgg <- aggregateMosaicsClumondo(out, CLUMosaics, lpjGrid)
@

<<aggCluFig1, fig=TRUE, echo=TRUE>>=
gridPlot(cluAgg@data[,"pasture"], zlim=c(0,1), main="pasture")
@

<<aggCluFig2, fig=TRUE, echo=TRUE>>=
gridPlot(cluAgg@data[,"cropland"], zlim=c(0,1), main="cropland")
@

<<aggCluFig3, fig=TRUE, echo=TRUE>>=
gridPlot(cluAgg@data[,"natveg"], zlim=c(0,1), main="natveg")
@

Please note: At the moment the look up table for the USA is wrong. As a workaround the look up table for Canada is used for the 
US instead for the time being (see extra tranlastion vignette for an explanation of the problem).

\section{Translating CLUMondo Land Use to Crop Funtional Types}
\subsection{A Method based on an existing and recent land use map}
Which crop functional types are growing on cropland can be looked up on an existing map (e.g. a specific year of 
the standard landuse input data of LPJmL might be used). For that, the existing map
is screened in a rectangle around the pixel of interest for crops planted there. The ratio of the different crops on all
surrounding pixels than is calculated. In case the screened area of the look up map does not have crops, the 
mean crop ratios of the corresponding CLUMondo world region is calculated and applied. Using this approach, the preference for cultivating specific crops in a specific area stays constant over time and does not consider scenarios with a change of 
of cultivation preferences. Accuracy of estimating CFTs from neighbour-cells reaches Nash-Sutcliffe-Efficiencies up to 0.9 for small windows, but diminishes with increasing window sizes (Fig.~\ref{pic:EF}). 

\begin{figure}[hp]
<<screenWindow, fig=TRUE, echo=FALSE>>=
tp <- 37000
plot(lpjGrid, pch=".")
bar <- apply(
  coordinates(lpjGrid)[tp:(tp+10),],
  1,
  getNearPoints,
  coordsGrid=coordinates(lpjGrid),
  range=10
)
grid <- coordinates(lpjGrid)
points(grid[bar[[1]],1], grid[bar[[1]],2], pch=15, col="green", cex=0.3)
points(grid[tp,1], grid[tp,2], pch = 15, col="red")
@
\caption{Example of a 10 degree screening window (green) for specific crop functional types around 
the pixel of interest (red).\label{pic:screenWindow}}
\end{figure}

\begin{figure}[hp]
\centering
\includegraphics[width=0.7\textwidth]{EF}
\caption{Nash-Sutcliffe-Efficiency of the CFT-assignment to CLUMondo cropland based on
the year 2000 LPJmL input map in dependency of the window size. 
All crops, except pasture were included in the statistical calculation. \label{pic:EF}}
\end{figure}

A complete CLUMondo to LPJmL translation exercise would look as follows:
<<cluagg, eval=FALSE>>=
library(luess)
### read the LPJmL land use map of the year 2000 
## (adjust path!, landuse file is not included in this package)
cftFrac   <- getLPJ( "N:/vmshare/landuse/landuse.bin", 
  2000, 2000, 1700, 32, 2, sizeof_header=43)

### re-project the original CLUMondo landuse map for the year 2040
clu2040     <- transform_asciigrid("../../work/clu2040.txt")

### resample CLUMondo land use systems for the LPJmL-grid
out2040     <- resample_grid(clu2040, generate_grid(), cells=lpj_long_clupos)

### aggregate the land covers of the CLUMondo land use systems
cluAgg2040  <- aggregateMosaicsClumondo(out2040, CLUMosaics, lpjGrid)

### translate cropland to specific CFTs 
## window size = 2.5 degree, takes some minutes time
out_trans_2_5 <- translateCluToLpj(
  lpjGrid, 
  range=2.5, 
  landuse=cftFrac, 
  landuseClu=cluAgg2040, 
  scaleFactor=1000
)

### construct land use data set
## use CLUMondo pasture area directly
out_trans_2_5[1,,14] <- cluAgg2040@data[,"pasture"]*1000

### write the land use data set to a file
## get an valid LPJmL header 
## (adjust path, file not included in this package)
cftHeader <- readLpjHeader("N:/vmshare/landuse/landuse.bin")
## update number of years in header (only 1 in this example)
cftHeader$ny <- 1
## write file
writeLpjLanduse(out_trans_2_5, "landuse-new.bin", cftHeader)

### read new file for validation
cftNew <- getLPJ("landuse-new.bin", 2000,2000,2000,32,2,sizeof_header=43)
identical(cftNew, out_trans_2_5)
@

\section{Changes and new functionality in latest package versions}
\subsection{v0.16.0: resample\_grid() output format}
\label{txt:resampleOutput}
The function \texttt{resample\_grid()} returns objects of SpatialPointsDataFrame since 
version v0.16.0. Pixel type fractions data for this output can be accessed and plotted 
as follows:
<<plotsp, fig=TRUE>>=
grid_lr <- generate_grid(cellcentre.offset=c(-179.75, -59.75))
out     <- resample_grid(smallarea, grid_lr)
head(attr(out,"data"))
head(out@data)
img     <- gridPlot(
             attr(out, "data")[,1], 
             coordinates(out), 
             xlim=c(128,150), 
             ylim=c(-60,-50), cex=1.5
           )
@

<<plotsp2, fig=TRUE>>=
spplot(out, col.regions=rev(terrain.colors(100)), colorkey=TRUE)
@

The old output format of the versions before v0.16.0 can be obtained by specifying 
\texttt{verbose=TRUE}:
<<verbresample>>=
out <- resample_grid(smallarea, grid_lr, verbose=TRUE)
names(out)
@

\subsection{v0.17.0: Parallelization for faster grid resampling}
Since version v0.17.0 the function \texttt{resample\_grid()} is capable of using 
multiple cores
for calculation. This speeds up the function significantly. 
The packages \texttt{foreach} and 
\texttt{doParallel} are needed for this. Multiple core usage is invoked by providing the 
arguments \texttt{parallel=TRUE} and a number of \texttt{cores} to use:

<<multicore, eval=FALSE>>=
system.time(
  out1 <- resample_grid(CLUlonglat, lpjgrid, cells=40000:42000)
)
system.time(
  out2 <- resample_grid(CLUlonglat, lpjgrid, cells=40000:42000, 
                        parallel=TRUE, cores=2)
)
identical(out1, out2)
@

\subsection{v0.17.1: resample\_grid() faster without parallelization}
Since version v0.17.1 the function \texttt{resample\_grid()} internally uses 
\texttt{aggregate()} to count original pixel types. This is one magnitude
faster than the parallelized loop-variant of the previous versions. Therefore the option 
\texttt{parallel=TRUE} is deprecated as long as only a low
number of cores (less than approx. 20 cores) are available.



\bibliography{luesslit}
\end{document}